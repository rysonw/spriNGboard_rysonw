MyClass o_1;
  default ctor (1,unnamed)

Resp: Here, we are creating an object from the MyClass constructor called "o_1". Here we pass no argument so the first constructor
is used. We call the desc() function to print out the id and name. Default constructor.

MyClass o_2("o_2");
  custom ctor (2,o_2)

Resp: Here, we are creating an object from the MyClass constructor but use the custom constructor since we pass in a string this time.

MyClass o_3 = o_2;
  copy ctor (3,copy of (2,o_2);

Resp: Here, we are creating a copy of the previous object, o_2. We are using the reference to set the name to be "copy of" followed by the original object's desc

MyClass o_4("o_4");
  custom ctor (4,o_4)
o_4 = o_1;
  copy assign (4,o_4) from (1,unnamed)

Resp: We create a new object using the custom constructor with the name "o_4". We assign the values from o_1 to o_4.

MyClass o_5(move(o_1));
  move ctor (5,moved from unnamed)

Resp: We create a new object using the custom constructor with the name "o_5". We assign the name value from o_1 to o_5 while replcaing the name of o_1 to stolen.

o_1 = move(o_3);
  move assign (1,stolen) from (3,copy of (2,o_2))

Resp: Here we are assigning the values from o_3 to o_1.

MyClass o_6 = make_new_object_good();
  custom ctor (6,x)

Resp: Here are creating a new object o_6. Whatever is being returned from make_new_object_good() is what we are passing into the construtor for o_6. In this case I believe we are passing in x the string as the object m_name

MyClass o_7 = make_new_object_bad();
  custom ctor (7,y)
  move ctor (8,moved from y)
  dtor (7,stolen)

Resp: Here we are creating another object called o_7. The custom constructor is called bc we passed in y as our m_name. Then the move construtor is called because the make_new_object_bad() is moving the object y back to the main function. 
Since we moved an object, we then call the destuctor since it is not being used anymore.

open brace (vectors)
vector<MyClass> v_1;

Resp: We create a vector called v_1

v_1.emplace_back("v_1[0]");
  custom ctor (9,v_1[0])

Resp: Emplace creates a new object of the stated type for the vector and appends it to the vector. Here we pass in the name "v_1[0]" for the object name

v_1.push_back(MyClass("v_1[1]"));
  custom ctor (10,v_1[1])
  move ctor (11,moved from v_1[1])
  move ctor (12,moved from v_1[0])
  dtor (9,stolen)
  dtor (10,stolen)

Resp: We create a temp copy of a MyClass object. We call the custom constructor and create a new object and append it to the vector. The vector is now full and most double its size. To do this, the vector moves the first 2 objects to new objects.
The vector then deletes objects 9 and 10. Size goes from 1 to 2

v_1.emplace_back(MyClass("v_1[2]"));
  custom ctor (13,v_1[2])
  move ctor (14,moved from v_1[2])
  move ctor (15,moved from moved from v_1[0])
  dtor (12,stolen)
  move ctor (16,moved from moved from v_1[1])
  dtor (11,stolen)
  dtor (13,stolen)

Resp: We create an object that uses the custom constructor. We are past capacity of the vector so we have to move all the objects inside the old vector. After it is moved, we delete the other objects.

vector<MyClass> v_2 = v_1;
  copy ctor (17,copy of (15,moved from moved from v_1[0]))
  copy ctor (18,copy of (16,moved from moved from v_1[1]))
  copy ctor (19,copy of (14,moved from v_1[2]))

Resp: We create a new vector of v_1 so we have to copy everything over.

vector<MyClass> v_3 = move(v_1);
closing brace (vectors)
  dtor (15,moved from moved from v_1[0])
  dtor (16,moved from moved from v_1[1])
  dtor (14,moved from v_1[2])
  dtor (17,copy of (15,moved from moved from v_1[0]))
  dtor (18,copy of (16,moved from moved from v_1[1]))
  dtor (19,copy of (14,moved from v_1[2]))

Resp: Since the brackets are closing, call is popped off the call stack and all the associated data is deleted

opening brace (pointers)
auto up_1 = make_unique<MyClass>("u_1");
  custom ctor (20,u_1)

Resp: Creates a object using the custom constructor. This object has a unique pointer

auto sp_1 = make_shared<MyClass>("s_1");
  custom ctor (21,s_1)

Resp: Creates a object using the custom constructor. This object has a shared pointer

opening brace (inner pointers)
auto up_2 = make_unique<MyClass>("u_2");
  custom ctor (22,u_2)

Resp: Creates a object using the custom constructor. This object has a unique pointer

auto up_3 = move(up_1);

Resp: Since unique pointers cannot be copied we use move here. This transfers ownership for this object to up_3 which then automatically deletes up_1

auto sp_2 = make_shared<MyClass>("s_2");
  custom ctor (23,s_2)

Resp: Creates a object using the custom constructor. This object has a shared pointer

sp_1 = sp_2;
  dtor (21,s_1)

Resp: Since these objects have shared pointers, we can assign the pointer of sp_1 to to point to s_2 which is what sp_2 is also pointing at. Since no pointers are pointing to s_1, it is deleted.

closing brace (inner pointers)
  dtor (20,u_1)
  dtor (22,u_2)

Resp: Objects associated with unique pointers are deleted.

closing brace (pointers)
  dtor (23,s_2)

Resp: Remaining object is deleted. Not deleted before bc sp_1 was still in scope.

closing brace (main)
  dtor (8,moved from y)
  dtor (6,x)
  dtor (5,moved from unnamed)
  dtor (4,=(1,unnamed))
  dtor (3,stolen)
  dtor (2,o_2)
  dtor (1,moved from copy of (2,o_2))


Resp: Since the brackets are closing, call is popped off the call stack and all the associated data is deleted

